{"ast":null,"code":"var _jsxFileName = \"/Users/shubhams/Documents/Work/temp/React/Food Ordering system/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from \"./CartContext\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.item.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.item[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      let updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n    } else {\n      const updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount\n    };\n  }\n\n  return defaultCart;\n};\n\nconst defaultCart = {\n  items: [],\n  totalAmount: 0\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, updateCartState] = useReducer(cartReducer, defaultCart);\n\n  const addItemToCart = item => {\n    updateCartState({\n      type: \"ADD\",\n      item\n    });\n  };\n\n  const removeItemToCart = item => {\n    updateCartState({\n      type: \"REMOVE\",\n      id: item.id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: item => {\n      addItemToCart(item);\n    },\n    removeItem: () => removeItemToCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"k2jTCbCBksHD9ExJV6MTv3hge/c=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/shubhams/Documents/Work/temp/React/Food Ordering system/src/store/CartProvider.js"],"names":["CartContext","useReducer","cartReducer","state","action","type","updatedAmount","totalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","items","concat","defaultCart","CartProvider","props","cartState","updateCartState","addItemToCart","removeItemToCart","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B;;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,aAAa,GACjBH,KAAK,CAACI,WAAN,GAAoBH,MAAM,CAACI,IAAP,CAAYC,KAAZ,GAAoBL,MAAM,CAACI,IAAP,CAAYE,MADtD;AAEA,UAAMC,qBAAqB,GAAGR,KAAK,CAACK,IAAN,CAAWI,SAAX,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYT,MAAM,CAACI,IAAP,CAAYK,EADN,CAA9B;AAGA,UAAMC,gBAAgB,GAAGX,KAAK,CAACK,IAAN,CAAWG,qBAAX,CAAzB;AACA,QAAII,YAAJ;;AACA,QAAID,gBAAJ,EAAsB;AAClB,UAAIE,WAAW,GAAG,EACd,GAAGF,gBADW;AAEdJ,QAAAA,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAA0BN,MAAM,CAACI,IAAP,CAAYE;AAFhC,OAAlB;AAKH,KAND,MAMO;AACH,YAAMK,YAAY,GAAGZ,KAAK,CAACc,KAAN,CAAYC,MAAZ,CAAmBd,MAAM,CAACI,IAA1B,CAArB;AACH;;AAED,WAAO;AACLS,MAAAA,KAAK,EAAEF,YADF;AAELR,MAAAA,WAAW,EAAED;AAFR,KAAP;AAID;;AACD,SAAOa,WAAP;AACD,CAzBD;;AA2BA,MAAMA,WAAW,GAAG;AAClBF,EAAAA,KAAK,EAAE,EADW;AAElBV,EAAAA,WAAW,EAAE;AAFK,CAApB;;AAKA,MAAMa,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+BtB,UAAU,CAACC,WAAD,EAAciB,WAAd,CAA/C;;AACA,QAAMK,aAAa,GAAIhB,IAAD,IAAU;AAC9Be,IAAAA,eAAe,CAAC;AAAElB,MAAAA,IAAI,EAAE,KAAR;AAAeG,MAAAA;AAAf,KAAD,CAAf;AACD,GAFD;;AAGA,QAAMiB,gBAAgB,GAAIjB,IAAD,IAAU;AACjCe,IAAAA,eAAe,CAAC;AAAElB,MAAAA,IAAI,EAAE,QAAR;AAAkBQ,MAAAA,EAAE,EAAEL,IAAI,CAACK;AAA3B,KAAD,CAAf;AACD,GAFD;;AAIA,QAAMa,WAAW,GAAG;AAClBT,IAAAA,KAAK,EAAEK,SAAS,CAACL,KADC;AAElBV,IAAAA,WAAW,EAAEe,SAAS,CAACf,WAFL;AAGlBoB,IAAAA,OAAO,EAAGnB,IAAD,IAAU;AACjBgB,MAAAA,aAAa,CAAChB,IAAD,CAAb;AACD,KALiB;AAMlBoB,IAAAA,UAAU,EAAE,MAAMH;AANA,GAApB;AAQA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtBD;;GAAMT,Y;;KAAAA,Y;AAwBN,eAAeA,YAAf","sourcesContent":["import CartContext from \"./CartContext\";\nimport { useReducer } from \"react\";\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.item.findIndex(\n      (item) => item.id === action.item.id\n    );\n    const existingCartItem = state.item[existingCartItemIndex];\n    let updatedItems;\n    if (existingCartItem) {\n        let updatedItem = {\n            ...existingCartItem,\n            amount: existingCartItem.amount + action.item.amount\n\n        }\n    } else {\n        const updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount,\n    };\n  }\n  return defaultCart;\n};\n\nconst defaultCart = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst CartProvider = (props) => {\n  const [cartState, updateCartState] = useReducer(cartReducer, defaultCart);\n  const addItemToCart = (item) => {\n    updateCartState({ type: \"ADD\", item });\n  };\n  const removeItemToCart = (item) => {\n    updateCartState({ type: \"REMOVE\", id: item.id });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: (item) => {\n      addItemToCart(item);\n    },\n    removeItem: () => removeItemToCart,\n  };\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}