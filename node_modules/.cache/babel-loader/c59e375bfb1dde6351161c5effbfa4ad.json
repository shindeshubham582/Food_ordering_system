{"ast":null,"code":"import _slicedToArray from\"/Users/shubhams/Documents/Work/temp/React/Food Ordering system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/Users/shubhams/Documents/Work/temp/React/Food Ordering system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/shubhams/Documents/Work/temp/React/Food Ordering system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import CartContext from\"./CartContext\";import{useReducer}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var cartReducer=function cartReducer(state,action){var updatedItems;if(action.type===\"ADD\"){var updatedAmount=state.totalAmount+action.item.price*action.item.amount;var existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.item.id;});if(existingCartItemIndex!==-1){var existingCartItem=state.items[existingCartItemIndex];var updatedItem=_objectSpread(_objectSpread({},existingCartItem),{},{amount:existingCartItem.amount+action.item.amount});updatedItems=_toConsumableArray(state.items);updatedItems[existingCartItemIndex]=updatedItem;}else{updatedItems=state.items.concat(action.item);}return{items:updatedItems,totalAmount:updatedAmount};}if(action.type===\"REMOVE\"){var _existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.item.id;});var _existingCartItem=state.items[_existingCartItemIndex];if(_existingCartItem.amount===1){updatedItems=state.items.filter(function(item){return item.id!==action.item.id;});}else{var _updatedItem=_objectSpread(_objectSpread({},_existingCartItem),{},{amount:_existingCartItem.amount-1});updatedItems=_toConsumableArray(state.items);updatedItems[_existingCartItemIndex]=_updatedItem;}var _updatedAmount=state.totalAmount-action.item.price;return{items:updatedItems,totalAmount:_updatedAmount};}return defaultCart;};var defaultCart={items:[],totalAmount:0};var CartProvider=function CartProvider(props){var _useReducer=useReducer(cartReducer,defaultCart),_useReducer2=_slicedToArray(_useReducer,2),cartState=_useReducer2[0],updateCartState=_useReducer2[1];var addItemToCart=function addItemToCart(item){updateCartState({type:\"ADD\",item:item});};var clearCartHandler=function clearCartHandler(){updateCartState({type:'CLEAR'});};var removeItemToCart=function removeItemToCart(item){updateCartState({type:\"REMOVE\",item:item});};var cartContext={items:cartState.items,totalAmount:cartState.totalAmount,addItem:function addItem(item){addItemToCart(item);},removeItem:function removeItem(item){removeItemToCart(item);},clearCart:function clearCart(item){clearCartHandler();}};return/*#__PURE__*/_jsx(CartContext.Provider,{value:cartContext,children:props.children});};export default CartProvider;","map":{"version":3,"sources":["/Users/shubhams/Documents/Work/temp/React/Food Ordering system/src/store/CartProvider.js"],"names":["CartContext","useReducer","cartReducer","state","action","updatedItems","type","updatedAmount","totalAmount","item","price","amount","existingCartItemIndex","items","findIndex","id","existingCartItem","updatedItem","concat","filter","defaultCart","CartProvider","props","cartState","updateCartState","addItemToCart","clearCartHandler","removeItemToCart","cartContext","addItem","removeItem","clearCart","children"],"mappings":"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","sourcesContent":["import CartContext from \"./CartContext\";\nimport { useReducer } from \"react\";\n\nconst cartReducer = (state, action) => {\n  let updatedItems;\n  if (action.type === \"ADD\") {\n    const updatedAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    if (existingCartItemIndex !== -1) {\n      const existingCartItem = state.items[existingCartItemIndex];\n      let updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount,\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount,\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    const existingCartItem = state.items[existingCartItemIndex];\n    if (existingCartItem.amount === 1) {\n      updatedItems = state.items.filter((item) => item.id !== action.item.id);\n    } else {\n      let updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount - 1,\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n    const updatedAmount = state.totalAmount - action.item.price;\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount,\n    };\n  }\n\n  return defaultCart;\n};\n\nconst defaultCart = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst CartProvider = (props) => {\n  const [cartState, updateCartState] = useReducer(cartReducer, defaultCart);\n  const addItemToCart = (item) => {\n    updateCartState({ type: \"ADD\", item });\n  };\n\n const clearCartHandler = () => {\n  updateCartState({\n    type: 'CLEAR'\n  })\n }\n\n  const removeItemToCart = (item) => {\n    updateCartState({ type: \"REMOVE\", item: item });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: (item) => {\n      addItemToCart(item);\n    },\n    removeItem: item => {removeItemToCart(item)},\n    clearCart: item => {clearCartHandler()}\n  };\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}