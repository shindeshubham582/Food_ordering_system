{"ast":null,"code":"var _jsxFileName = \"/Users/shubhams/Documents/Work/temp/React/Food Ordering system/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from \"./CartContext\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst cartReducer = (state, action) => {\n  let updatedItems;\n\n  if (action.type === \"ADD\") {\n    const updatedAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n\n    if (existingCartItemIndex !== -1) {\n      const existingCartItem = state.items[existingCartItemIndex];\n      let updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    if (existingCartItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.item.id);\n    } else {\n      let updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    const updatedAmount = state.totalAmount - action.item.price;\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount\n    };\n  }\n\n  return defaultCart;\n};\n\nconst defaultCart = {\n  items: [],\n  totalAmount: 0\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, updateCartState] = useReducer(cartReducer, defaultCart);\n\n  const addItemToCart = item => {\n    updateCartState({\n      type: \"ADD\",\n      item\n    });\n  };\n\n  const clearCartHandler = () => {\n    updateCartState({\n      type: 'CLEAR'\n    });\n  };\n\n  const removeItemToCart = item => {\n    updateCartState({\n      type: \"REMOVE\",\n      item: item\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: item => {\n      addItemToCart(item);\n    },\n    removeItem: item => {\n      removeItemToCart(item);\n    },\n    clearCart: item => {\n      clearCartHandler();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"k2jTCbCBksHD9ExJV6MTv3hge/c=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/shubhams/Documents/Work/temp/React/Food Ordering system/src/store/CartProvider.js"],"names":["CartContext","useReducer","cartReducer","state","action","updatedItems","type","updatedAmount","totalAmount","item","price","amount","existingCartItemIndex","items","findIndex","id","existingCartItem","updatedItem","concat","filter","defaultCart","CartProvider","props","cartState","updateCartState","addItemToCart","clearCartHandler","removeItemToCart","cartContext","addItem","removeItem","clearCart","children"],"mappings":"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","sourcesContent":["import CartContext from \"./CartContext\";\nimport { useReducer } from \"react\";\n\nconst cartReducer = (state, action) => {\n  let updatedItems;\n  if (action.type === \"ADD\") {\n    const updatedAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    if (existingCartItemIndex !== -1) {\n      const existingCartItem = state.items[existingCartItemIndex];\n      let updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount,\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount,\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    const existingCartItem = state.items[existingCartItemIndex];\n    if (existingCartItem.amount === 1) {\n      updatedItems = state.items.filter((item) => item.id !== action.item.id);\n    } else {\n      let updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount - 1,\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n    const updatedAmount = state.totalAmount - action.item.price;\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount,\n    };\n  }\n\n  return defaultCart;\n};\n\nconst defaultCart = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst CartProvider = (props) => {\n  const [cartState, updateCartState] = useReducer(cartReducer, defaultCart);\n  const addItemToCart = (item) => {\n    updateCartState({ type: \"ADD\", item });\n  };\n\n const clearCartHandler = () => {\n  updateCartState({\n    type: 'CLEAR'\n  })\n }\n\n  const removeItemToCart = (item) => {\n    updateCartState({ type: \"REMOVE\", item: item });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: (item) => {\n      addItemToCart(item);\n    },\n    removeItem: item => {removeItemToCart(item)},\n    clearCart: item => {clearCartHandler()}\n  };\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}